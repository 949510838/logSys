<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!--1.引入redis配置信息-->
    <context:property-placeholder location="classpath:redis-config.properties"/>
	
	<!--2.配置redis连接池-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    
    <!--3.配置redis的连接工厂-->
    <!--等价下面的配置 <bean id="JedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" p:host-name="${redis.host}" p:password="${redis.pass}" p:port="${redis.port}" p:poolConfig-ref="poolConfig"/> -->
    <bean id="JedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    	<property name="hostName" value="${redis.host}" />
    	<property name="password" value="${redis.pass}" />
    	<property name="port" value="${redis.port}" />
    	<property name="timeout" value="${redis.timeout}" />
    	<property name="poolConfig" ref="poolConfig" />
    </bean>

    <!--4.获取redisTemplate,template需要redis连接工厂-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
    	<property name="connectionFactory" ref="JedisConnectionFactory" />
    	<!-- 设置序列化Key的实例化对象,解决String乱码问题 -->
    	<property name="keySerializer">
    		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
    	</property>
    	<property name="valueSerializer">
    		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
    	</property>
    	<property name="hashKeySerializer">
    		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
    	</property>   	
    </bean>
    
    
    <!-- 若只使用连接池的配置，在代码中获取该对象即可获取jedis  -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg>
        <constructor-arg name="host" value="${redis.host}"></constructor-arg>
        <constructor-arg name="port" value="${redis.port}"></constructor-arg>
        <constructor-arg name="timeout" value="${redis.timeout}"></constructor-arg>
        <constructor-arg name="password" value="${redis.pass}"></constructor-arg>
    </bean>
    
    <!-- 集群cluster配置 -->
    <bean id="jedisCluster" class="redis.clients.jedis.JedisCluster">
        <!-- nodes的注入可以先创建多个HostAndPort的bean，下面使用<ref bean="node1"/>进行注入 -->
        <constructor-arg name="nodes">
            <set>
                <!-- 配置Redis集群中的Redis节点信息，端口分别是6379~6386共8个节点 -->
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6379"></constructor-arg>
                </bean>
                <!-- 鉴于篇幅原因，中间省略了6个HostAndPort的配置 -->
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="127.0.0.1"></constructor-arg>
                    <constructor-arg name="port" value="6386"></constructor-arg>
                </bean>
            </set>
        </constructor-arg>
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>
    </bean>
	

</beans>