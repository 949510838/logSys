<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  
 	<!-- 自定义过滤器：对get提交参数编码处理 -->   
	<filter>
        <filter-name>HandleCharacter</filter-name>
        <filter-class>com.logSys.filter.HandleCharacter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HandleCharacter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>  
  	<!-- springMVC自带的编码过滤器，对post提交进行编码处理 -->
  	<filter>
        <filter-name>charsetEncoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>charsetEncoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- spring MVC 配置-->
    <servlet>
         <servlet-name>spring</servlet-name>
         <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
         <init-param>
            <param-name>contextConfigLocation</param-name>
            <!-- 此处指向的的是SpringMVC的配置文件 如果配置文件地址和名称不一样需要更改，默认位置为src根目录-->
            <param-value>classpath:springmvc.xml</param-value>
         </init-param>
         <!--配置容器在启动的时候就加载这个servlet并实例化-->
         <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <!-- 对springmvc的servlet的匹配规则，/代表所有的请求都会被springmvc的servlet处理。当请求为xx.xx时，会到controller匹配全名，若果没有就自动去除后缀再 匹配 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
  	
  	<!-- 加载springApplication的配置文件 ， param要放在listener前面-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:springApplication.xml</param-value>
    </context-param>
    
    <!-- listener  -->
    <!-- ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。 -->
    <!-- 如果在web.xml中不写任何参数配置信息，默认的路径是/WEB-INF/applicationContext.xml，在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml；如果是要自定义文件名可以在web.xml里加入contextConfigLocation -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- 指定监听器加载的log4j配置文件 -->
	<context-param>
		<!-- 系统把web目录的路径压入一个叫webApp.root(名称任意)的系统变量，用于配置文件中使用${webApp.root}获取项目根路径 --> 
		<!-- 在java类中可以用System.getProperty("webapp.root")来动态获项目的运行路径。 -->
		<param-name>webAppRootKey</param-name> 
		<param-value>webApp.root</param-value> 
	</context-param>     
	<context-param>  
	    <param-name>log4jConfigLocation</param-name>  
	    <param-value>classpath:log4j.properties</param-value>  
	</context-param>
	<listener>  
	    <listener-class>  
	        org.springframework.web.util.Log4jConfigListener  
	    </listener-class>  
	</listener> 
	
	<!-- session对象的监听器，监听session的创建和销毁，添加自定义的SessionContext，保存系统已经创建的session对象，根据sessionId获取session对象 -->
	 <listener>  
        <listener-class>com.logSys.sessionManager.SessionListener</listener-class>  
    </listener> 
    
    <!-- druid连接池监控 -->
    <!-- http://IP:端口/项目名/druid  访问数据源监控地址 -->
    <servlet>
	    <servlet-name>DruidStatView</servlet-name>
	    <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
	    <init-param>
	        <!-- 用户名 -->
	        <param-name>loginUsername</param-name>
	        <param-value>admin</param-value>
	    </init-param>
	    <init-param>
	        <!-- 密码 -->
	        <param-name>loginPassword</param-name>
	        <param-value>2333</param-value>
	    </init-param>
	</servlet>
	<servlet-mapping>
	    <servlet-name>DruidStatView</servlet-name>
	    <url-pattern>/druid/*</url-pattern>
	</servlet-mapping>
    
    

	<!-- 【处理静态资源方式1】Tomcat的defaultServlet来处理静态文件 -->
	 <!-- <servlet-mapping>
	    <servlet-name>default</servlet-name>
	    <url-pattern>*.css</url-pattern>
	    <url-pattern>*.html</url-pattern>
	    <url-pattern>*.gif</url-pattern>
	    <url-pattern>*.jpg</url-pattern>
	    <url-pattern>*.png</url-pattern>
	    <url-pattern>*.js</url-pattern>
	    <url-pattern>*.eot</url-pattern>
	    <url-pattern>*.svg</url-pattern>
	    <url-pattern>*.ttf</url-pattern>
	    <url-pattern>*.woff</url-pattern>
	    <url-pattern>*.woff2</url-pattern>
	    <url-pattern>*.ico</url-pattern>
	  </servlet-mapping> -->
	  

</web-app>